/* SPDX-License-Identifier: BSD-2-Clause */
#ifndef _SYS_INITCALL_H_
#define _SYS_INITCALL_H_ 1
#include <sys/cdefs.h>

typedef void(*initcall_t)(void);

/* Used to link a function with the
 * specific initcall identifier. */
#define initcall(id, fn) \
    void __initcall_##id(void) __alias(fn)

/* Used to declare public initcalls in order
 * for other initcalls to depend on. */
#define initcall_extern(id) \
    void __initcall_##id(void)

/* Guarantees that a specific initcall
 * will be called only after an another
 * one; in other words an initcall can
 * depend on other initcalls. */
#define initcall_dependency(id, dp) \
    static const initcall_t __used __section(".discard.initcall.test") \
        __concat(__test_initcall, __COUNTER__) = &__initcall_##dp, \
        __concat(__test_initcall, __COUNTER__) = &__initcall_##id; \
    static const char __used __section(".discard.initcall.depend") __aligned(1) \
        __concat(__depend_initcall, __COUNTER__)[] = #dp " " #id

/* A generic list of initcalls to depend on.
 * Any initcall must depend on something in order
 * to get invoked at all so we need to provide
 * a starter list of generic hooks */
initcall_extern(boot);
initcall_extern(setup);
initcall_extern(kernel);

/* Boot-time initcalls are called first. That's
 * it: nothing before them except for some really
 * early target-specific shit is going on. */
#define boot_initcall(id, fn) \
    initcall(id, fn); \
    initcall_dependency(id, boot); \
    initcall_dependency(setup, id)

/* Setup initcalls are called after boot initcalls.
 * These are used in a mix between target-specific
 * and portable code in order for the system to
 * get ready for initializing portable kernel
 * subsystems and drivers. */
#define setup_initcall(id, fn) \
    initcall(id, fn); \
    initcall_dependency(id, setup); \
    initcall_dependency(kernel, id)

/* Kernel initcalls are a kind of a dead-end for now
 * because I still have no particular driver API or
 * whatever that might be called during this time
 * but I think it's a good thing to have it defined. */
#define kernel_initcall(id, fn) \
    initcall(id, fn); \
    initcall_dependency(id, kernel)

/* Generated by a shell script */
extern const initcall_t initcalls[];

#endif
